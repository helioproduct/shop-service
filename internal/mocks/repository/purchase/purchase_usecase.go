// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	purchase "shop-service/internal/repository/purchase"
)

// PurchaseUsecase is an autogenerated mock type for the PurchaseUsecase type
type PurchaseUsecase struct {
	mock.Mock
}

// GetSummary provides a mock function with given fields: ctx, req
func (_m *PurchaseUsecase) GetSummary(ctx context.Context, req purchase.PurchaseSummaryRequest) ([]*purchase.PurchaseSummary, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetSummary")
	}

	var r0 []*purchase.PurchaseSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, purchase.PurchaseSummaryRequest) ([]*purchase.PurchaseSummary, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, purchase.PurchaseSummaryRequest) []*purchase.PurchaseSummary); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*purchase.PurchaseSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, purchase.PurchaseSummaryRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPurchaseUsecase creates a new instance of PurchaseUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPurchaseUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PurchaseUsecase {
	mock := &PurchaseUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
