// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"
	auth "shop-service/internal/usecase/auth"

	domain "shop-service/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

// CheckSession provides a mock function with given fields: ctx, session
func (_m *AuthUsecase) CheckSession(ctx context.Context, session *domain.Session) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for CheckSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: ctx, req
func (_m *AuthUsecase) Login(ctx context.Context, req auth.LoginRequest) (*domain.Session, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.LoginRequest) (*domain.Session, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth.LoginRequest) *domain.Session); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth.LoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, req
func (_m *AuthUsecase) Register(ctx context.Context, req auth.RegisterRequest) (*domain.Session, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *domain.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth.RegisterRequest) (*domain.Session, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth.RegisterRequest) *domain.Session); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth.RegisterRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthUsecase creates a new instance of AuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUsecase {
	mock := &AuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
