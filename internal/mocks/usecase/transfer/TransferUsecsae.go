// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	transfer "shop-service/internal/repository/transfer"
)

// TransferUsecsae is an autogenerated mock type for the TransferUsecsae type
type TransferUsecsae struct {
	mock.Mock
}

// GetReceivedCoinsSummary provides a mock function with given fields: ctx, username
func (_m *TransferUsecsae) GetReceivedCoinsSummary(ctx context.Context, username string) ([]*transfer.ReceivedCoinsSummary, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetReceivedCoinsSummary")
	}

	var r0 []*transfer.ReceivedCoinsSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*transfer.ReceivedCoinsSummary, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*transfer.ReceivedCoinsSummary); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transfer.ReceivedCoinsSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSentCoinsSummary provides a mock function with given fields: ctx, username
func (_m *TransferUsecsae) GetSentCoinsSummary(ctx context.Context, username string) ([]*transfer.SentCoinsSummary, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetSentCoinsSummary")
	}

	var r0 []*transfer.SentCoinsSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*transfer.SentCoinsSummary, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*transfer.SentCoinsSummary); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*transfer.SentCoinsSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransferUsecsae creates a new instance of TransferUsecsae. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransferUsecsae(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransferUsecsae {
	mock := &TransferUsecsae{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
